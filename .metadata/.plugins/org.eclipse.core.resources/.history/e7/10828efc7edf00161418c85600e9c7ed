/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Copyright Â©2016 Gary F. Pollice
 *******************************************************************************/

package aquarium;

import static aquarium.hw.TemperatureAdjuster.AdjusterState.*;
import aquarium.hw.*;
import aquarium.hw.TemperatureAdjuster.AdjusterState;
import static aquarium.TemperatureController.TemperatureScale.*;
import java.util.function.Function;

/**
 * TBD: You fill in the description.
 * @version Aug 2, 2016
 */
public final class TemperatureControllerImpl implements TemperatureController
{
	private final TemperatureSensor sensor;
	private TemperatureAdjuster adjuster = null;
	private AdjusterState currentState;
	private double desiredTemperature;
	private double acceptableVariation;
	//*HU
	private TemperatureScale previousTempScale;
	
	private final Function<Double, Void> observeTemperatureChange = (Double temp) -> {
		final double delta = Math.abs(desiredTemperature - temp);
		System.out.println(delta);
		final AdjusterState state = getCurrentState();
		currentState = delta < acceptableVariation ? OFF
				: desiredTemperature > temp ? HEATING : COOLING;
		if (state != currentState) {
			adjuster.setState(currentState);
		} 
		return null;
	};
	
	/**
	 * Private constructor. The only way to create an instance of this class
	 * is to use the factory method.
	 */
	private TemperatureControllerImpl(TemperatureSensor sensor, TemperatureAdjuster adjuster)
	{
		this.sensor = sensor;
		this.adjuster = adjuster;
		//*HU
		this.previousTempScale = CELSIUS;
		currentState = OFF;
		desiredTemperature = 20.0;
		acceptableVariation = 1.0;
		sensor.addObserver(observeTemperatureChange);
		observeTemperatureChange.apply(sensor.getTemperature());
	}
	
	/**
	 * Factory method for creating an instance of the TemperatureControllerImpl. This creates
	 * the 
	 * @param sensor the sensor associated with the controller
	 * @param adjuster the adjuster associated with the controller
	 * @return the resulting controller
	 */
	static public TemperatureController makeTemperatureController(
			TemperatureSensor sensor, TemperatureAdjuster adjuster)
	{
		return new TemperatureControllerImpl(sensor, adjuster);
	}
	
	/*
	 * @see aquarium.TemperatureController#setTemperature(double)
	 */
	@Override
	public void setTemperature(double temperature)
	{
		desiredTemperature = previousTempScale==CELSIUS? temperature : temperatureFtoC(temperature);
		observeTemperatureChange.apply(sensor.getTemperature());
	}

	/*
	 * @see aquarium.TemperatureController#getCurrentTemperature()
	 */
	@Override
	public double getCurrentTemperature()
	{
		double temp = sensor.getTemperature();
		return previousTempScale==CELSIUS? temp : temperatureCtoF(temp);
	}

	/*
	 * @see aquarium.TemperatureController#setAcceptableVariation(double)
	 */
	@Override
	public void setAcceptableVariation(double variance)
	{
		if(previousTempScale==CELSIUS){
			acceptableVariation=variance;
			sensor.setDelta(variance);
		}
		else{
			acceptableVariation=ratioFtoC(variance);
			sensor.setDelta(ratioFtoC(variance));
		}
		observeTemperatureChange.apply(sensor.getTemperature());
	}

	/*
	 * @see aquarium.TemperatureController#getAcceptableVariation()
	 */
	@Override
	public double getAcceptableVariation()
	{
		return previousTempScale==CELSIUS? acceptableVariation : ratioCtoF(acceptableVariation);
	}
	
	/*
	 * @see aquarium.TemperatureController#setTemperatureScale(aquarium.TemperatureController.TemperatureScale)
	 */
	@Override
	public void setTemperatureScale(TemperatureScale newTemperatureScale)
	{
		//change the scale to the new scale unit
		previousTempScale=newTemperatureScale;	
	}

	/*
	 * @see aquarium.TemperatureController#getTemperatureScale()
	 */
	@Override
	public TemperatureScale getTemperatureScale()
	{
		return previousTempScale;
	}
	
	private AdjusterState getCurrentState()
	{
		return currentState;
	}
	
	private double getDesiredTemperature()
	{	
		return previousTempScale==CELSIUS? desiredTemperature : temperatureCtoF(desiredTemperature);
	}
	
	private double temperatureCtoF(double number){
		return number*9/5+32;
	}
	
	private double temperatureFtoC(double number){
		return (number-32)*5/9;
	}
	
	private double ratioCtoF(double number){
		return number*9/5;
	}
	
	private double ratioFtoC(double number){
		return number*5/9;
	}

}
