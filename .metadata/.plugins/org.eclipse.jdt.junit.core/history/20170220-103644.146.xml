<?xml version="1.0" encoding="UTF-8"?><testrun name="GammaXiangqiTest" project="XiangqiStudentjhu4" tests="38" started="38" failures="1" errors="0" ignored="0">
  <testsuite name="xiangqi.studentjhu4.GammaXiangqiTest" time="0.075">
    <testcase name="chariotCanNotMoveDiagonally" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.039"/>
    <testcase name="getPieceAtreturnNoneNone" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="redChariotsInitializedCorrectlyInBlackApspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redChariotsInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="chariotCanNotJump" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="chariotCanMoveVertically" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="generalCanMoveVertically" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redSoldierInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="blackElephantInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="catchExceptionWhenGetPieceAtInvalidPlace" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redAdvisorInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="redElephantInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="chariotCanNotEatSameColorPiece" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="blackGeneralInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="advisorCanNotMoveOutOfThePalace" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.002"/>
    <testcase name="redGeneralInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.003"/>
    <testcase name="elephantCanNotMoveInOneOrThreeDiagonal" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="chariotCanMoveHorizontally" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.002"/>
    <testcase name="blackAdvisorInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redAdvisorInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="redGeneralInitializedCorrectlyInRedRAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.002"/>
    <testcase name="blackSoldierInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redSoldierInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="blackChariotsInitializedCorrectlyInRedApspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="advisorCanNotMoveOrthogaonally" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="redElephantInitializedCorrectlyInBlackAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="blackGeneralInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="blackElephantInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="blackSoldierInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="factoryProduceGammaXiangqiGame" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="elephantCanNotMoveOrthogonally" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="blackChariotsInitializedCorrectlyInBlackApspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="advisorCanMoveDiagonallyWithDistanceOne" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.002"/>
    <testcase name="blackAdvisorInitializedCorrectlyInRedAspect" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.0"/>
    <testcase name="generalCanMoveHorizontally" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="elephantCanNotMoveIfBlocked" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="elephantCanMoveDiagonallyInDistanceOfTwo" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.001"/>
    <testcase name="generalCanNotMoveOutOfPalace" classname="xiangqi.studentjhu4.GammaXiangqiTest" time="0.011">
      <failure>java.lang.AssertionError: expected:&lt;OK&gt; but was:&lt;ILLEGAL&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:118)&#13;
	at org.junit.Assert.assertEquals(Assert.java:144)&#13;
	at xiangqi.studentjhu4.GammaXiangqiTest.generalCanNotMoveOutOfPalace(GammaXiangqiTest.java:539)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</failure>
    </testcase>
  </testsuite>
</testrun>
